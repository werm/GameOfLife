(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.GameOfLife = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Grid = {
  dimensions: {},
  rows: [],

  init: function init(w, h) {
    Grid.dimensions.width = w;
    Grid.dimensions.height = h;

    for (var i = 0; i < h; i++) {
      var row = [];
      for (var j = 0; j < w; j++) {
        row.push(Cell.create(i, j));
      }
      Grid.rows.push(row);
    }

    return Grid.rows;
  },

  build: function build() {
    var gameBoard = document.querySelector('#gol');
    gameBoard.innerHTML = '';
    Grid.rows.forEach(function (row) {
      var gridRow = document.createElement('tr');
      row.forEach(function (cell, i) {
        Cell.examine(cell);
        var celly = document.createElement('td');
        celly.classList.add('cell', 'cell-' + cell.x + cell.y);
        if (cell.y === 0) {
          celly.classList.add('end-row');
        }
        if (cell.live) {
          celly.classList.add('alive');
        }
        gridRow.appendChild(celly);
      });
      gameBoard.appendChild(gridRow);
    });
  },

  traverse: function traverse(fn) {
    var x, y;
    var context = { stop: false };
    outer: for (y = 0; y < Grid.dimensions.height; y++) {
      for (x = 0; x < Grid.dimensions.width; x++) {
        fn(context, Grid.rows[y][x], x, y);
        if (context.stop) {
          break outer;
        }
      }
    }
  },

  tick: function tick() {
    Grid.traverse(function (ctxt, cell) {
      Cell.examine(cell);
    });

    Grid.traverse(function (ctxt, cell) {
      Cell.update(cell);
    });

    Grid.build();
  }
};

var Cell = {
  create: function create(x, y) {
    var cell = {};
    cell.x = x;
    cell.y = y;
    cell.live = Math.random() <= 0.5 ? true : false;
    cell.self = Cell;

    return cell;
  },

  examine: function examine(cell) {
    cell.liveNeighbors = 0;

    Cell.checkNeighbors(cell, function (ctxt, neighbor) {
      if (neighbor.live) {
        cell.liveNeighbors++;
      }
    });

    return cell;
  },

  update: function update(cell) {
    if (cell.live) {
      // if (cell.liveNeighbors === 2 || cell.liveNeighbors === 3) { console.log(cell.liveNeighbors); }
      if (cell.liveNeighbors <= 1 || cell.liveNeighbors >= 4) {
        cell.live = false;
      }
    } else if (cell.liveNeighbors === 2 || cell.liveNeighbors === 3) {
      cell.live = true;
    }
    return cell;
  },

  checkNeighbors: function checkNeighbors(cell, fn) {
    var x, y, n;
    var context = { stop: false };

    check: for (y = Math.max(0, cell.y - 1); y <= Math.min(Grid.dimensions.height - 1, cell.y + 1); y++) {
      for (x = Math.max(0, cell.x - 1); x <= Math.min(Grid.dimensions.width - 1, cell.x + 1); x++) {
        if (x !== cell.x || y !== cell.y) {
          var neighbor = Grid.rows[y][x];

          fn(context, neighbor);
          if (context.stop) {
            break check;
          }
        }
      }
    }
  }

};

exports['default'] = { Grid: Grid, Cell: Cell };
module.exports = exports['default'];

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
